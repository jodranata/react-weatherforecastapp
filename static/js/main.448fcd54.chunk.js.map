{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Form","props","getWeather","onSubmit","type","name","placeholder","required","autoComplete","Weather","temperature","city","country","humidity","description","error","toUpperCase","defaultProps","undefined","apiKey","App","e","a","preventDefault","cityInput","target","elements","value","charAt","slice","toLowerCase","api","fetch","fetchURL","json","data","console","log","message","setState","kelvin","main","temp","celc","toFixed","fahr","sys","weather","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.448fcd54.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Title() {\n  return (\n    <div className=\"app-header\">\n      <div className=\"app-header-opacity\">\n        <h1>Weather Finder</h1>\n        <p>It was such a lovely day, that it seemed a pity to get up.</p>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Form(props) {\n  const { getWeather } = props;\n  return (\n    <div className=\"app-form-container\">\n      <form onSubmit={getWeather} className=\"app-form\">\n        <input\n          type=\"text\"\n          name=\"city\"\n          placeholder=\"City..\"\n          required\n          className=\"input-text\"\n          autoComplete=\"off\"\n        />\n        {/* eslint-disable-next-line max-len */}\n        <input\n          type=\"text\"\n          name=\"country\"\n          placeholder=\"Country...\"\n          required\n          className=\"input-text\"\n          autoComplete=\"off\"\n        />\n        <button type=\"submit\" className=\"submit-button\">\n          Get Weather\n        </button>\n      </form>\n    </div>\n  );\n}\nForm.propTypes = {\n  getWeather: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Weather(props) {\n  const { temperature, city, country, humidity, description, error } = props;\n  return (\n    <div className=\"app-data\">\n      {city && country && <p>{`Location: ${city}, ${country}`}</p>}\n      {temperature && <p>{`Temperature: ${temperature}`}</p>}\n      {humidity && <p>{`Humidity: ${humidity}`}</p>}\n      {description && <p>{`Weather: ${description}`}</p>}\n      {error && <p className=\"error\">{`ERROR: ${error.toUpperCase()}`}</p>}\n    </div>\n  );\n}\n\nWeather.defaultProps = {\n  temperature: undefined,\n  city: undefined,\n  country: undefined,\n  humidity: undefined,\n  description: undefined,\n  error: '',\n};\n\nWeather.propTypes = {\n  temperature: PropTypes.string,\n  city: PropTypes.string,\n  country: PropTypes.string,\n  humidity: PropTypes.number,\n  description: PropTypes.string,\n  error: PropTypes.string,\n};\n","import React from 'react';\nimport Title from './components/Title';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst apiKey = 'd9c07d4512624f3440e47cbed4c175b4';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined,\n    };\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n    const cityInput = e.target.elements.city.value;\n    const city = cityInput.charAt(0).toUpperCase() + cityInput.slice(1);\n    const country = e.target.elements.country.value.toLowerCase();\n    const proxy = `https://cors-anywhere.herokuapp.com/`;\n    /* eslint-disable max-len */\n    const api = `${proxy}api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${apiKey}`;\n    /* eslint-enable max-len */\n    const fetchURL = await fetch(api);\n    const data = await fetchURL.json();\n    console.log(data);\n    /* Change state with the data from API  */\n    if (!data.message) {\n      const kelvin = data.main.temp;\n      const celc = (kelvin - 273.15).toFixed(2);\n      const fahr = ((kelvin - 273.15) * (9 / 5) + 32).toFixed(2);\n      this.setState({\n        temperature: `${celc} °C / ${fahr} °F`,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: '',\n      });\n    } else {\n      /* set state to undefined, if the API doesn't have any data on the inputted location(form) */\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: data.message,\n      });\n    }\n  };\n\n  render() {\n    const { temperature, city, country, humidity, description, error } = this.state;\n    return (\n      <div className=\"app-container\">\n        <Title />\n        {/* pass getWeather function as */}\n        <Form getWeather={this.getWeather} />\n        <Weather\n          temperature={temperature}\n          city={city}\n          country={country}\n          humidity={humidity}\n          description={description}\n          error={error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}